language: generic
#deprecated
#sudo: required
services:
    - docker
# we are using Dockerfile.dev because we need access here to react's test suite, which is not available in production
# this time Dockerfile.dev is not in root directory, so note the ./client/ before Dockerfile.dev
# also this time we're building the container from the ./client
before_install:
    - docker build -t vadimyershov/docker-multi-container-test -f ./client/Dockerfile.dev ./client
script:
    - docker run -e CI=true vadimyershov/docker-multi-container-test npm run test
# after everything is tested successfully you add on an after_success block
# here we do a build for client, nginx, server and worker
# we do not need to specify -f and the file because by default docker-compose looks for Dockerfile
after_success:
    - docker build -t vadimyershov/docker-multi-client ./client
    - docker build -t vadimyershov/docker-multi-nginx ./nginx
    - docker build -t vadimyershov/docker-multi-server ./server
    - docker build -t vadimyershov/docker-multi-worker ./worker
    # log in to docker-cli
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin
    # take those images and push them to docker hub - each image is pushed separately
    - docker push vadimyershov/docker-multi-client
    - docker push vadimyershov/docker-multi-nginx
    - docker push vadimyershov/docker-multi-server
    - docker push vadimyershov/docker-multi-worker
### DEPLOY TO AWS EB DIRECTLY ###
deploy:
    provider: elasticbeanstalk
    # region can be found in sub url in EB
    region: us-east-1
    # in other project, this key was "name" but here it's "app"
    app: docker-multi-container
    # environment can be found in EB, usually SomethingWritten-env
    env: DockerMultiContainer-env
    bucket_name: elasticbeanstalk-us-east-1-283415605965
    # most likely the bucket path will be the same as the app name
    bucket_path: docker-multi-container
    # only deploy the application when the master (or whatever is selected) branch gets some new code
    on:
        branch: master
    # these keys are generated through amazon IAM for use with the project and stored as travis env variables
    # you select a new user with programmatic access and search for elastic beanstalk
    access_key_id: $AWS_ACCESS_KEY
    secret_access_key: $AWS_SECRET_KEY
